"use strict";!function n(e,t,o){function r(a,s){if(!t[a]){if(!e[a]){var i="function"==typeof require&&require;if(!s&&i)return i(a,!0);if(u)return u(a,!0);var p=new Error("Cannot find module '"+a+"'");throw p.code="MODULE_NOT_FOUND",p}var l=t[a]={exports:{}};e[a][0].call(l.exports,function(n){var t=e[a][1][n];return r(t?t:n)},l,l.exports,n,e,t,o)}return t[a].exports}for(var u="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(n,e,t){SupCore.system.registerPlugin("typescriptAPI","Sup.Sound",{code:"namespace Sup { export class Sound extends Asset {} }",defs:"declare namespace Sup { class Sound extends Asset { dummySoundMember; } }"}),SupCore.system.registerPlugin("typescriptAPI","Sup.Audio",{code:"namespace Sup {\n  export namespace Audio {\n    export function getMasterVolume(volume) {\n      if (player.gameInstance.audio.getContext() == null) return 0;\n      return player.gameInstance.audio.masterGain.gain.value;\n    }\n    export function setMasterVolume(volume) {\n      if (player.gameInstance.audio.getContext() == null) return;\n      player.gameInstance.audio.masterGain.gain.value = volume;\n    }\n  }\n}\n",defs:"declare namespace Sup {\n  namespace Audio {\n    function getMasterVolume(): number;\n    function setMasterVolume(volume: number): void;\n  }\n}\n"}),SupCore.system.registerPlugin("typescriptAPI","Sup.Audio.SoundPlayer",{code:'namespace Sup {\n  export namespace Audio {\n    export function playSound(pathOrAsset: string|Sound, volume=1.0, options?: { loop?: boolean; pitch?: number; pan?: number; }) {\n      return new SoundPlayer(pathOrAsset, volume, options).play();\n    }\n  \n    export class SoundPlayer {\n      __inner: any;\n      constructor(pathOrAsset: string|Sound, volume=1.0, options?: { loop?: boolean; pitch?: number; pan?: number; }) {\n        let audioCtx = player.gameInstance.audio.getContext();\n        let audioMasterGain = player.gameInstance.audio.masterGain;\n        let soundAsset = (typeof pathOrAsset === "string") ? get(pathOrAsset, Sound) : <Sound>pathOrAsset;\n        this.__inner = new SupEngine.SoundPlayer(audioCtx, audioMasterGain, soundAsset.__inner.buffer);\n        this.__inner.setVolume(volume);\n        \n        if (options != null) {\n          if (options.loop != null) this.__inner.setLoop(options.loop);\n          if (options.pan != null) this.__inner.setPan(options.pan);\n          if (options.pitch != null) this.__inner.setPitch(options.pitch);\n        }\n      }\n      play() { this.__inner.play(); return this; }\n      stop() { this.__inner.stop(); return this; }\n      pause() { this.__inner.pause(); return this; }\n      isPlaying() { return this.__inner.getState() === SoundPlayer.State.Playing; }\n      getState() { return this.__inner.getState(); }\n\n      getLoop() { return this.__inner.isLooping; }\n      setLoop(looping) { this.__inner.setLoop(looping); return this; }\n      getVolume() { return this.__inner.volume; }\n      setVolume(volume) { this.__inner.setVolume(volume); return this; }\n      getPan() { return this.__inner.pan; }\n      setPan(pan) { this.__inner.setPan(pan); return this; }\n      getPitch() { return this.__inner.pitch; }\n      setPitch(pitch) { this.__inner.setPitch(pitch); return this; }\n    }\n    \n    export namespace SoundPlayer {\n      export enum State { Playing, Paused, Stopped }\n    }\n  }\n}\n',defs:"declare namespace Sup {\n  namespace Audio {\n    function playSound(pathOrAsset: string|Sound, volume?: number /* 1.0 */, options?: { loop?: boolean; pitch?: number; pan?: number; }): SoundPlayer;\n  \n    class SoundPlayer {\n      constructor(pathOrAsset: string|Sound, volume?: number /* 1.0 */, options?: { loop?: boolean; pitch?: number; pan?: number; });\n      play(): SoundPlayer;\n      stop(): SoundPlayer;\n      pause(): SoundPlayer;\n      isPlaying(): boolean;\n      getState(): SoundPlayer.State;\n\n      getLoop(): boolean;\n      setLoop(looping: boolean): SoundPlayer;\n      getVolume(): number;\n      setVolume(volume: number): SoundPlayer;\n      getPan(): number;\n      setPan(pan: number): SoundPlayer;\n      getPitch(): number;\n      setPitch(pitch: number): SoundPlayer;\n    }\n\n    namespace SoundPlayer {\n      enum State { Playing, Paused, Stopped }\n    }\n  }\n}\n"})},{}]},{},[1]);